s = _{
    " " |
    "\t"|
    "\r"|
    "\n"|
    "\x0b"|
    "\x0c" |
    "--" ~ (!NEWLINE ~ ANY)* ~ NEWLINE |
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}
b = _{ !(ASCII_ALPHANUMERIC|"_") }
bs = _{ b ~ s* }

back_quoted     = _{ "`" ~ (!("`"|"\\") ~ ANY | "``" | "\\" ~ ANY)* ~ "`" }
single_quoted   = _{ "'" ~ (!("'"|"\\") ~ ANY | "''" | "\\" ~ ANY)* ~ "'" }
double_quoted   = _{ "\"" ~ (!("\""|"\\") ~ ANY | "\"\"" | "\\" ~ ANY)* ~ "\"" }

balanced = _{
    "(" ~ (balanced|s)* ~ ")" |
    "[" ~ (balanced|s)* ~ "]" |
    "{" ~ (balanced|s)* ~ "}" |
    back_quoted |
    single_quoted |
    double_quoted |
    !("("|"["|"{"|"`"|"'"|"\""|")"|"]"|"}"|s) ~ ANY
}

ident = @{
    back_quoted |
    double_quoted |
    "[" ~ (!"]" ~ ANY)* ~ "]" |
    (ASCII_ALPHA|"_") ~ (ASCII_ALPHANUMERIC|"_")*
}

qname = {
    ident ~ (s* ~ "." ~ s* ~ ident){0,2}
}

column_definition = {
    (!"{{" ~ (balanced|s))+
}
table_options = {
    ANY*
}

create_table_content = {
    "(" ~ (column_definition | "{{" ~ s* ~ expr ~ s* ~ "}}")* ~ ")" ~ table_options
}

create_table = _{
    SOI ~ s* ~ ^"create" ~ s+ ~ ^"table" ~ bs ~ qname ~ s* ~ create_table_content
}

expr = _{ expr_set_variable | prec_expr_or }
prec_expr_or = _{ expr_or | prec_expr_and }
prec_expr_and = _{ expr_and | prec_expr_not }
prec_expr_not = _{ expr_not | prec_expr_cmp }
prec_expr_cmp = _{ expr_cmp | prec_expr_plus }
prec_expr_plus = _{ expr_plus | prec_expr_mul }
prec_expr_mul = _{ expr_mul | prec_expr_primary }

prec_expr_primary = _{
    expr_rownum | expr_null | expr_true | expr_false |
    expr_group |
    expr_string |
    expr_number |
    expr_unary |
    expr_case_value_when |
    expr_timestamp |
    expr_interval |
    expr_get_variable |
    expr_function
}

expr_set_variable = {
    "@" ~ ident ~ s* ~ ":=" ~ s* ~ expr
}

expr_or = {
    prec_expr_and ~ (bs ~ ^"or" ~ bs ~ prec_expr_and)+
}
expr_and = {
    prec_expr_not ~ (bs ~ ^"and" ~ bs ~ prec_expr_not)+
}
expr_not = {
    ^"not" ~ bs ~ prec_expr_not
}

expr_cmp = {
    prec_expr_plus ~ bs ~ cmp_op ~ s* ~ prec_expr_plus
}
cmp_op = @{
    ^"is" ~ (bs ~ ^"not")? ~ b | "<=" | ">=" | "<>" | "<" | ">" | "="
}

expr_plus = {
    prec_expr_mul ~ (s* ~ plus_op ~ s* ~ prec_expr_mul)+
}
plus_op = @{
    "+" | "-" | "||"
}

expr_mul = {
    prec_expr_primary ~ (s* ~ mul_op ~ s* ~ prec_expr_primary)+
}
mul_op = @{
    "*" | "/"
}

expr_rownum = { ^"rownum" }
expr_null = { ^"null" }
expr_true = { ^"true" }
expr_false = { ^"false" }
expr_group = _{ "(" ~ s* ~ expr ~ s* ~ ")" }
expr_get_variable = { "@" ~ ident ~ !(s* ~ ":=") }
expr_function = {
    qname ~ s* ~ "(" ~ s* ~ (expr ~ s* ~ ("," ~ s* ~ expr ~ s*)*)? ~ ")"
}
expr_string = {
    single_quoted
}
expr_number = @{
    ^"0x" ~ ASCII_HEX_DIGIT+ |
    (ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT*)? | "." ~ ASCII_DIGIT+) ~ (^"e" ~ ("+"|"-")? ~ ASCII_DIGIT+)?
}
expr_unary = {
    plus_op ~ s* ~ prec_expr_primary
}
expr_case_value_when = {
    ^"case" ~ bs ~ expr ~ bs ~
    (^"when" ~ bs ~ expr ~ bs ~ ^"then" ~ bs ~ expr ~ bs)+ ~
    (^"else" ~ bs ~ expr ~ bs)? ~
    ^"end"
}

expr_timestamp = {
    ^"timestamp" ~ bs ~ prec_expr_primary
}
expr_interval = {
    ^"interval" ~ bs ~ expr ~ bs ~ (
        interval_unit_week | interval_unit_day | interval_unit_hour | interval_unit_minute |
        interval_unit_second | interval_unit_ms | interval_unit_us
    )
}
interval_unit_week = @{ ^"week" }
interval_unit_day = @{ ^"day" }
interval_unit_hour = @{ ^"hour" }
interval_unit_minute = @{ ^"minute" }
interval_unit_second = @{ ^"second" }
interval_unit_ms = @{ ^"millisecond" }
interval_unit_us = @{ ^"microsecond" }
